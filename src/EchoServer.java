// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com import java.io.*;import java.util.Observable;import java.util.Observer;import com.lloseng.ocsf.server.ConnectionToClient;import com.lloseng.ocsf.server.ObservableOriginatorServer;import com.lloseng.ocsf.server.OriginatorMessage;import common.ChatIF;import ocsf.server.*;/** * This class overrides some of the methods in the abstract  * superclass in order to give more functionality to the server. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave;re * @author Fran&ccedil;ois B&eacute;langer * @author Paul Holden * @version July 2000 */public class EchoServer implements Observer {  //Class variables *************************************************    /**   * The default port to listen on.   */  final public static int DEFAULT_PORT = 5555;   //Instance variables **********************************************    /**   * The interface type variable.  It allows the implementation of    * the display method in the client.   */  ChatIF serverUI;   ObservableOriginatorServer oos;    //Constructors ****************************************************    /**   * Constructs an instance of the echo server.   *   * @param port The port number to connect on.   */  public EchoServer(int port)   {	this.oos = new ObservableOriginatorServer(port);	oos.addObserver(this);	try {		oos.listen();	} catch (IOException e) {		// TODO Auto-generated catch block		e.printStackTrace();	}  }    //Instance methods ************************************************    /**   * This method handles any messages received from the client.   *   * @param msg The message received from the client.   * @param client The connection from which the message originated.   */  public void handleMessageFromClient    (Object msg, ConnectionToClient client)  {	//String[] message_split = ((String) msg).split(" ");  	/*if(message_split[0]=="#login") {  		//System.out.println(message_split[1]);  		client.setInfo("id", message_split[1]);  	}*/	System.out.println("Message received: " + msg + " from " + client);    oos.sendToAllClients(msg);  }       /**   * This method overrides the one in the superclass.  Called   * when the server starts listening for connections.   */  protected void serverStarted()  {    System.out.println      ("Server listening for connections on port " + oos.getPort());  }    /**   * This method overrides the one in the superclass.  Called   * when the server stops listening for connections.   */  protected void serverStopped()  {    System.out.println      ("Server has stopped listening for connections.");  }    synchronized protected void clientClosed(ConnectionToClient client, Throwable exception) {	  oos.sendToAllClients("Connection will be closed by the server");	   }    synchronized protected void clientException(ConnectionToClient client, Throwable exception) {	  System.out.println("A client disconnect");  }    protected void clientConnected(ConnectionToClient client) {	  System.out.println("Client " + client + " connected");  }    synchronized protected void clientDisconnected(ConnectionToClient client) {	  System.out.println("Client " + client + " disconnected");  }      /**   * This method handles all data coming from the UI               *   * @param message The message from the UI.       */  public void handleMessageFromServerUI(String message)  {	  String[] message_split = message.split(" ");  	if(message_split[0].charAt(0)!='#') {  		oos.sendToAllClients("Server MSG > " + message);  	}else {  		  		switch(message_split[0]) {  		case "#quit": try {  			oos.close();			} catch (IOException e2) {				e2.printStackTrace();			}  					  quit();  					  break;  					    		case "#stop": oos.stopListening();					  break;					    		case "#close": try {  			oos.close();			} catch (IOException e1) {				// TODO Auto-generated catch block				e1.printStackTrace();			}  					   break;  			  		case "#setport":if(!oos.isListening()) {  						oos.setPort(Integer.parseInt(message_split[1]));  						}		  						 break;  						   		case "#start": if(!oos.isListening()) {  			try {  				oos.listen();			} catch (IOException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}  		}else {  			System.out.println("You are already connected to the server");  		}  		break;    		case "#getport": System.out.println("Port : " + oos.getPort());  						 break;  		}  }  }  	  	 /**     * This method terminates the server.     */    public void quit()    {      System.exit(0);    }	@Override	public void update(Observable arg0, Object arg1) {		OriginatorMessage om = (OriginatorMessage) arg1;		this.handleMessageFromClient(om.getMessage(), om.getOriginator());			} }//End of EchoServer class